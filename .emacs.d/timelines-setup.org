* General Settings
** Window
#+BEGIN_SRC emacs-lisp
  ;; Set the theme and the cursor's colour
  ;;(use-package monokai-theme)


  ;; load evil
  (use-package evil
    :ensure t ;; install the evil package if not installed
    :init ;; tweak evil's configuration before loading it
    (setq evil-search-module 'evil-search)
    (setq evil-ex-complete-emacs-commands nil)

    (setq evil-split-window-below t)
    (setq evil-shift-round nil)
    (setq evil-want-C-u-scroll t)
    :config ;; tweak evil after loading it
    (evil-mode)

    ;; example how to map a command in normal mode (called 'normal state' in evil)
    (define-key evil-normal-state-map (kbd ", w") 'evil-window-vsplit))


  (define-key evil-normal-state-map "n" 'evil-next-line)
  (define-key evil-normal-state-map "t" 'evil-previous-line)
  (define-key evil-normal-state-map "s" 'evil-forward-char)
  (define-key evil-normal-state-map "h" 'evil-backward-char)



   ;;(set-frame-parameter (selected-frame) 'alpha '(<active> . <inactive>))
   ;;(set-frame-parameter (selected-frame) 'alpha <both>)
  (set-frame-parameter (selected-frame) 'alpha '(93 . 80))
  (add-to-list 'default-frame-alist '(alpha . (95 . 50)))


  (use-package one-themes
    :init
      (load-theme 'one-dark t))

  (use-package smart-mode-line
    :init
      (setq sml/theme 'respectful)
      (setq sml/shorten-directory t)
    :config
      (add-to-list 'sml/replacer-regexp-list '("^~/.dotfiles/" ":dotfiles:"))
      (sml/setup))


  (set-cursor-color "#ff1493")

  ;; Set the window's name
    (setq frame-title-format "TimeLines")

    ;; Remove unecessary distractions from the frame
    (when window-system
      (menu-bar-mode -1)
      (tool-bar-mode -1)
      (scroll-bar-mode -1)
      (tooltip-mode -1))

    ;; Type 'y' or 'n' instead of 'yes' or 'no'
    (fset 'yes-or-no-p 'y-or-n-p)

    ;; Replaces a selection with any letter pressed
    (delete-selection-mode 1)

    (line-number-mode 1)
    (show-paren-mode 1)

    ;; Hihlight the line the cursor is on
    (global-hl-line-mode t)

    ;; Operate on visual, rather than logical, lines
    (add-hook 'text-mode-hook 'turn-on-visual-line-mode)

    ;; Reload the init file
    (global-set-key (kbd "C-c p")
		    (lambda() (interactive)
		      (org-babel-load-file "~/.emacs.d/init.el")))

    (setq scroll-conservatively 100)

    ;; Cursor settings
    (blink-cursor-mode 0)
    (set-default 'cursor-type 'box)

    ;; Clean up startup behaviour
    (setq inhibit-startup-message t)
    (setq initial-scratch-message "")
    (setq ring-bell-function 'ignore)

    ;; Go to any line
    (global-set-key "\M-g" 'goto-line)

#+END_SRC

** Letter navigation
#+BEGIN_SRC emacs-lisp
  ;; i.e. cut
  (global-set-key (kbd "C-M-,") 'kill-region)

  ;; i.e. paste
  (global-unset-key (kbd "M-."))
  (global-set-key (kbd "M-.") 'yank)

  ;; i.e. cut till line end
  (global-unset-key (kbd "C-M-'"))
  (global-set-key (kbd "C-M-'") 'kill-line)

  ;; i.e. cut whole line
  (global-set-key (kbd "C-,") 'kill-whole-line)
  #+END_SRC
* Packages
** Org
   #+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	  '("m" "#+begin_src emacs-lisp\n\n#+end_src" "<src lang=\"emacs-lisp\">\n\n</src>"))

  (require 'ox-md) ;; load markdown export backend

  (use-package org-ref)
  (use-package helm)

  (setq org-hide-leading-stars t)
  (setq org-alphabetical-lists t)
  (setq org-src-fontify-natively t)  ;; you want this to activate coloring in blocks
  (setq org-src-tab-acts-natively t) ;; you want this to have completion in blocks
  (setq org-hide-emphasis-markers t) ;; to hide the *,=, or / markers
  (setq org-pretty-entities t)       ;; to have \alpha, \to and others display as utf8 http://orgmode.org/manual/Special-symbols.html

  ;;override org-mode's keybindings for navigation keys
  (define-key org-mode-map (kbd "C-k") nil)
  (define-key org-mode-map (kbd "C-j") nil)
  (define-key org-mode-map (kbd "C-i") nil)
  (define-key org-mode-map (kbd "M-e") nil)
  (define-key org-mode-map (kbd "C-d") nil)
  (define-key org-mode-map (kbd "C-y") nil)

   #+END_SRC
** Code
   #+BEGIN_SRC emacs-lisp
  (use-package haskell-mode)
  (use-package ghc)

  (use-package intero)
   #+END_SRC
** Util
*** Yasnippets
    #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :init (yas-global-mode 1))

   (define-key yas-minor-mode-map (kbd "<tab>") nil)
   (define-key yas-minor-mode-map (kbd "TAB") nil)

   (define-key yas-minor-mode-map (kbd "SPC") yas-maybe-expand)
    #+END_SRC
*** Navigation
**** Scroll Restore
     #+BEGIN_SRC emacs-lisp
  (use-package scroll-restore
    :config (scroll-restore-mode 1))
     #+END_SRC

**** Smartparens
     #+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :config (smartparens-global-mode 1))
     #+END_SRC
**** Ido
     #+BEGIN_SRC emacs-lisp
  (use-package ido
    :config (ido-mode 1)
	    (setq ido-enable-flex-matching nil)
	    (setq ido-create-new-buffer 'always)
	    (setq ido-everywhere t)
	    (ido-mode 1))

  (use-package ido-vertical-mode
    :init
    (ido-vertical-mode 1))

     #+END_SRC
**** Hydra
     #+BEGIN_SRC emacs-lisp :exports none
    (global-unset-key (kbd "C-q"))
'
    (use-package hydra)
    ;; When C-q-(any of the following) is pressed, the letter navigation mode is enabled until another command is executed
    ;; (C-q doesn't have to remain pressed after the first toggle)
    (defhydra hydra-move (global-map "C-q")
      "move"
      ("i" previous-line)
      ("k" next-line)
      ("j" left-char)
      ("l" right-char)
      ("u" beginning-of-line)
      ("o" end-of-line)
      )

     #+END_SRC

**** which-Key
     #+BEGIN_SRC emacs-lisp
  ;; When a key combination has started, after a while
  ;; displays all possible keys to complete it
  (use-package which-key
    :config (which-key-mode))
     #+END_SRC

**** Avy-Jump
     #+BEGIN_SRC emacs-lisp
  ;; allows to jump to any point in the text with a couple key presses
  (use-package avy)
  (global-set-key (kbd "M-k") 'avy-goto-char)
     #+END_SRC

**** Expand-Region
     #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-y") nil)
  (use-package expand-region
    :bind ("C-y" . er/expand-region))
     #+END_SRC
**** Delete-file-and-buffer
     #+BEGIN_SRC emacs-lisp
  (defun delete-file-and-buffer ()
    "Kill the current buffer and deletes the file it is visiting."
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
	(if (vc-backend filename)
	    (vc-delete-file filename)
	  (progn
	    (delete-file filename)
	    (message "Deleted file %s" filename)
	    (kill-buffer))))))

  (global-set-key (kbd "C-c e")  'delete-file-and-buffer)
     #+END_SRC


